
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/mst/define.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct DefineMstData {
	uint32_t	action_point_heal_count{};
	std::optional<uint32_t>	action_point_recover_fixed{};
	std::optional<uint32_t>	action_point_threshold{};
	uint32_t	arena_battle_time_limit{};
	uint32_t	arena_need_mission_id{};
	std::string	arena_tutorial_npc_info{};
	uint32_t	colosseum_shop_ticket{};
	std::string	compaign_flag{};
	uint32_t	continue_dia_count{};
	std::string	dbb_crystal_values{};
	std::string	dbb_fixed_settings_value{};
	uint32_t	default_unit_count{};
	uint32_t	default_warehouse_count{};
	uint32_t	ext_plus_max_count{};
	uint32_t	fight_point_heal_count{};
	uint32_t	friend_ext_count{};
	uint32_t	friendpoint_rein_friend{};
	uint32_t	friendpoint_rein_friend_my{};
	float	friendpoint_rein_friend_my_rate{};
	float	friendpoint_rein_friend_rate{};
	uint32_t	friendpoint_rein_other{};
	uint32_t	friendpoint_rein_other_my{};
	float	friendpoint_rein_other_my_rate{};
	float	friendpoint_rein_other_rate{};
	uint32_t	init_summoner_arm_id{};
	std::string	initial_unit{};
	uint32_t	item_box_ext_count{};
	uint32_t	karma_per_achieve_point{};
	uint32_t	max_achieve_point{};
	uint32_t	max_achieve_point_item_per_day{};
	uint32_t	max_achieve_point_karma_per_day{};
	uint32_t	max_achieve_point_zel_per_day{};
	uint32_t	max_achievement_challenge_accept_count{};
	uint32_t	max_achievement_record_challenge_accept_count{};
	uint32_t	max_arena_rank{};
	uint32_t	max_blacklist_count{};
	uint32_t	max_cbp{};
	uint32_t	max_colosseum_ticket{};
	uint64_t	max_friend_points{};
	uint64_t	max_karma{};
	uint32_t	max_multi_p{};
	uint32_t	max_party_deck_count{};
	uint64_t	max_summoner_friend_point{};
	uint64_t	max_summoner_sp{};
	uint32_t	max_team_lv{};
	uint32_t	max_unit_count{};
	uint32_t	max_warehouse_count{};
	uint64_t	max_zel{};
	uint32_t	medal_max_num{};
	std::string	parse_overdrive_param{};
	uint32_t	permit_invitation{};
	uint32_t	raid_bag_count{};
	uint32_t	raid_max_p{};
	uint32_t	recover_time_action{};
	uint32_t	recover_time_fight{};
	uint32_t	recover_time_frohun{};
	uint32_t	recover_time_raid{};
	uint32_t	reset_fe_skill_dia_count{};
	uint32_t	tutorial_dungeon_id{};
	uint32_t	tutorial_gatcha_id{};
	uint32_t	unit_box_ext_count{};
	float	unit_mix_great_exp_rate{};
	float	unit_mix_super_exp_rate{};
	uint32_t	verify_flag{};
	uint32_t	zel_per_achieve_point{};
};
template <>
struct glz::meta<DefineMstData>
{
    using T = DefineMstData;
    static constexpr auto value = object(
		"C8KkHGa7", &T::action_point_heal_count,
		"hAiXsSPF", &T::action_point_recover_fixed,
		"eRQvzLeF", &T::action_point_threshold,
		"YR4HI56k", &T::arena_battle_time_limit,
		"yFRYDj67", &T::arena_need_mission_id,
		"6W4PdoJY", &T::arena_tutorial_npc_info,
		"OjAiNSoh", &T::colosseum_shop_ticket,
		"MFz8YRS6", &T::compaign_flag,
		"QW3HiNv8", &T::continue_dia_count,
		"jFdW1ipx", &T::dbb_crystal_values,
		"7o6lcc66", &T::dbb_fixed_settings_value,
		"k0xrd38b", &T::default_unit_count,
		"8U93zxsf", &T::default_warehouse_count,
		"4t3qX2kT", &T::ext_plus_max_count,
		"sy9G24Su", &T::fight_point_heal_count,
		"3Ep5akHJ", &T::friend_ext_count,
		"2oD1fmuX", &T::friendpoint_rein_friend,
		"86sx4FfJ", &T::friendpoint_rein_friend_my,
		"JBR0Po3b", glz::write_float32<&T::friendpoint_rein_friend_my_rate>,
		"PnE6xo93", glz::write_float32<&T::friendpoint_rein_friend_rate>,
		"K10QSeuj", &T::friendpoint_rein_other,
		"VkA3nu0b", &T::friendpoint_rein_other_my,
		"mI1jW0X7", glz::write_float32<&T::friendpoint_rein_other_my_rate>,
		"6p4YW7oc", glz::write_float32<&T::friendpoint_rein_other_rate>,
		"deYOowYJ", &T::init_summoner_arm_id,
		"21ovwqYT", &T::initial_unit,
		"CA01vo2Q", &T::item_box_ext_count,
		"KCG5f1AN", &T::karma_per_achieve_point,
		"1JFcDr05", &T::max_achieve_point,
		"M1AJuFU6", &T::max_achieve_point_item_per_day,
		"K0sUIn8R", &T::max_achieve_point_karma_per_day,
		"4ARtfF7x", &T::max_achieve_point_zel_per_day,
		"p3pXbuHA", &T::max_achievement_challenge_accept_count,
		"kmxPgJu9", &T::max_achievement_record_challenge_accept_count,
		"tzCfGX83", &T::max_arena_rank,
		"DYMUxgt8", &T::max_blacklist_count,
		"woxAcRoH", &T::max_cbp,
		"924iwrJ9", &T::max_colosseum_ticket,
		"4YCzox9t", &T::max_friend_points,
		"jSxdlwqd", &T::max_karma,
		"6id2v7eN", &T::max_multi_p,
		"WHy3BSm9", &T::max_party_deck_count,
		"W9bwut7Q", &T::max_summoner_friend_point,
		"QhV0G2zu", &T::max_summoner_sp,
		"Kt8H4LN7", &T::max_team_lv,
		"ouXxIY63", &T::max_unit_count,
		"5pjoGBC4", &T::max_warehouse_count,
		"DXm2W8vY", &T::max_zel,
		"xq0fSrw3", &T::medal_max_num,
		"QylsZTpE", &T::parse_overdrive_param,
		"02IgM6ib", &T::permit_invitation,
		"09EbcDmX", &T::raid_bag_count,
		"S92Hcor3", &T::raid_max_p,
		"Ieq49JDy", &T::recover_time_action,
		"0BPn68DG", &T::recover_time_fight,
		"3xAsgHL8", &T::recover_time_frohun,
		"zkD98Hfy", &T::recover_time_raid,
		"5csFoG1G", &T::reset_fe_skill_dia_count,
		"91nRcYWT", &T::tutorial_dungeon_id,
		"uALQnngx", &T::tutorial_gatcha_id,
		"I73XkAQi", &T::unit_box_ext_count,
		"2inP0tCg", glz::write_float32<&T::unit_mix_great_exp_rate>,
		"zn65EXYF", glz::write_float32<&T::unit_mix_super_exp_rate>,
		"6GXx4LgZ", &T::verify_flag,
		"SAb3m9wo", &T::zel_per_achieve_point
    );
};

struct DefineMst;
template <> struct glz::meta<DefineMst>; 

struct DefineMst : public DefineMstData { 
    using TYPE = DefineMstData;
    using ARRAY_TYPE = std::array<TYPE, 1>;
    friend glz::meta<DefineMst>;

    DefineMst() = default;

    private:
        explicit DefineMst(const TYPE& q) : TYPE(q) {}
        ARRAY_TYPE _internal_data;

};
template <>
struct glz::meta<DefineMst>
{
    using T = DefineMst;
    static constexpr auto read_x = [](T& s, const T::ARRAY_TYPE& input) { s = T(input[0]); };
    static constexpr auto write_x = [](T& s) -> T::ARRAY_TYPE& { s._internal_data = T::ARRAY_TYPE{s}; return s._internal_data; };
    static constexpr auto value = glz::custom<read_x, write_x>;
};

