
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/mst/slots.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct SlotGameInfo {
	uint32_t	id{};
	std::string	name{};
	std::string	reel_pos{};
	std::string	slot_help_url{};
	std::string	slot_image{};
	std::string	use_medal{};
};
template <>
struct glz::meta<SlotGameInfo>
{
    using T = SlotGameInfo;
    static constexpr auto value = object(
		"zS45RFGb", &T::id,
		"I1Cki7Pb", &T::name,
		"h1PSnk5t", &T::reel_pos,
		"jsRoN50z", &T::slot_help_url,
		"TX98PnpE", &T::slot_image,
		"b5yeVr61", &T::use_medal
    );
};




struct SlotGameInfoR {
	SlotGameInfo	info{};
	SlotGamePictureInfo	pictures{};
};
template <>
struct glz::meta<SlotGameInfoR>
{
    using T = SlotGameInfoR;
    static constexpr auto value = object(
		"C38FmiUn", &T::info,
		"rY6j0Jvs", &T::pictures
    );
};




struct SlotGamePictureInfoData {
	uint32_t	id{};
	std::string	picture_name{};
};
template <>
struct glz::meta<SlotGamePictureInfoData>
{
    using T = SlotGamePictureInfoData;
    static constexpr auto value = object(
		"sE6tyI9i", &T::id,
		"iQM9dH0F", &T::picture_name
    );
};

struct SlotGamePictureInfo {
    using TYPE = SlotGamePictureInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<SlotGamePictureInfo>
{
    using T = SlotGamePictureInfo;
    static constexpr auto value = object("", &T::data);
};

struct SlotGameReelInfoData {
	uint32_t	id{};
	std::string	reel_data{};
};
template <>
struct glz::meta<SlotGameReelInfoData>
{
    using T = SlotGameReelInfoData;
    static constexpr auto value = object(
		"PINm2pM5", &T::id,
		"Z8eJi4pq", &T::reel_data
    );
};

struct SlotGameReelInfo {
    using TYPE = SlotGameReelInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<SlotGameReelInfo>
{
    using T = SlotGameReelInfo;
    static constexpr auto value = object("", &T::data);
};

struct VideoAdInfoData {
	uint32_t	available_value{};
	uint32_t	id{};
	uint64_t	next_available_time_left{};
	uint32_t	region_id{};
	bool	video_enabled{};
};
template <>
struct glz::meta<VideoAdInfoData>
{
    using T = VideoAdInfoData;
    static constexpr auto value = object(
		"Diwl3b56", &T::available_value,
		"k3ab6D82", &T::id,
		"oohpPLCt", &T::next_available_time_left,
		"Y3de0n2p", &T::region_id,
		"26adZ1iy", glz::bools_as_numbers<&T::video_enabled>
    );
};

struct VideoAdInfo {
    using TYPE = VideoAdInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<VideoAdInfo>
{
    using T = VideoAdInfo;
    static constexpr auto value = object("j129kD6r", &T::data);
};

struct VideoAdRegionData {
	std::string	country_code{};
	uint32_t	id{};
};
template <>
struct glz::meta<VideoAdRegionData>
{
    using T = VideoAdRegionData;
    static constexpr auto value = object(
		"j3d6E2ia", &T::country_code,
		"k3ab6D82", &T::id
    );
};

struct VideoAdRegion {
    using TYPE = VideoAdRegionData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<VideoAdRegion>
{
    using T = VideoAdRegion;
    static constexpr auto value = object("bpD29eiQ", &T::data);
};

struct VideoAdsSlotGameInfoData {
	SlotGameInfo	game_info{};
	VideoAdsSlotGameStandInfo	game_stand_info{};
	SlotGamePictureInfo	picture_info{};
	SlotGameReelInfo	reel_info{};
};
template <>
struct glz::meta<VideoAdsSlotGameInfoData>
{
    using T = VideoAdsSlotGameInfoData;
    static constexpr auto value = object(
		"C38FmiUn", &T::game_info,
		"tclBMiv2", &T::game_stand_info,
		"rY6j0Jvs", &T::picture_info,
		"iW62Scdg", &T::reel_info
    );
};

struct VideoAdsSlotGameInfo;
template <> struct glz::meta<VideoAdsSlotGameInfo>; 

struct VideoAdsSlotGameInfo : public VideoAdsSlotGameInfoData { 
    using TYPE = VideoAdsSlotGameInfoData;
    using ARRAY_TYPE = std::array<TYPE, 1>;
    friend glz::meta<VideoAdsSlotGameInfo>;

    VideoAdsSlotGameInfo() = default;

    private:
        explicit VideoAdsSlotGameInfo(const TYPE& q) : TYPE(q) {}
        ARRAY_TYPE _internal_data;

};
template <>
struct glz::meta<VideoAdsSlotGameInfo>
{
    using T = VideoAdsSlotGameInfo;
    static constexpr auto read_x = [](T& s, const T::ARRAY_TYPE& input) { s = T(input[0]); };
    static constexpr auto write_x = [](T& s) -> T::ARRAY_TYPE& { s._internal_data = T::ARRAY_TYPE{s}; return s._internal_data; };
    static constexpr auto value = glz::custom<read_x, write_x>;
};

struct VideoAdsSlotGameStandInfo {
	uint32_t	ads_bonus_flag{};
	uint32_t	ads_count{};
	uint32_t	current_bouns{};
	uint32_t	max_ads_count{};
	uint32_t	max_bouns_count{};
	uint32_t	next_day_timer{};
};
template <>
struct glz::meta<VideoAdsSlotGameStandInfo>
{
    using T = VideoAdsSlotGameStandInfo;
    static constexpr auto value = object(
		"qqdr4HlW", &T::ads_bonus_flag,
		"wRIgGCHh", &T::ads_count,
		"BrMgnCaT", &T::current_bouns,
		"JwBrVzIZ", &T::max_ads_count,
		"E9gMeBW0", &T::max_bouns_count,
		"er8Ups6U", &T::next_day_timer
    );
};




