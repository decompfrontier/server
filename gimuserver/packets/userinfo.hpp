
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/net/userinfo.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct MstUrlListData {
	std::string	id{};
	std::string	version{};
};
template <>
struct glz::meta<MstUrlListData>
{
    using T = MstUrlListData;
    static constexpr auto value = object(
		"moWQ30GH", &T::id,
		"d2RFtP8T", &T::version
    );
};

struct MstUrlList {
    using TYPE = MstUrlListData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<MstUrlList>
{
    using T = MstUrlList;
    static constexpr auto value = object("KeC10fuL", &T::data);
};

struct UserAchievementInfo {
};
template <>
struct glz::meta<UserAchievementInfo>
{
    using T = UserAchievementInfo;
    static constexpr auto value = object
    );
};




struct UserArenaInfoData {
};
template <>
struct glz::meta<UserArenaInfoData>
{
    using T = UserArenaInfoData;
    static constexpr auto value = object
    );
};

struct UserArenaInfo {
    using TYPE = UserArenaInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserArenaInfo>
{
    using T = UserArenaInfo;
    static constexpr auto value = object("8jBJ7uKR", &T::data);
};

struct UserBraveMedalInfoData {
};
template <>
struct glz::meta<UserBraveMedalInfoData>
{
    using T = UserBraveMedalInfoData;
    static constexpr auto value = object
    );
};

struct UserBraveMedalInfo {
    using TYPE = UserBraveMedalInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserBraveMedalInfo>
{
    using T = UserBraveMedalInfo;
    static constexpr auto value = object("6C0kzwM5", &T::data);
};

struct UserClearMissionInfoData {
};
template <>
struct glz::meta<UserClearMissionInfoData>
{
    using T = UserClearMissionInfoData;
    static constexpr auto value = object
    );
};

struct UserClearMissionInfo {
    using TYPE = UserClearMissionInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserClearMissionInfo>
{
    using T = UserClearMissionInfo;
    static constexpr auto value = object("UT1SVg59", &T::data);
};

struct UserDungeonKeyInfoData {
};
template <>
struct glz::meta<UserDungeonKeyInfoData>
{
    using T = UserDungeonKeyInfoData;
    static constexpr auto value = object
    );
};

struct UserDungeonKeyInfo {
    using TYPE = UserDungeonKeyInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserDungeonKeyInfo>
{
    using T = UserDungeonKeyInfo;
    static constexpr auto value = object("eFU7Qtb0", &T::data);
};

struct UserEquipBoostItemInfoData {
};
template <>
struct glz::meta<UserEquipBoostItemInfoData>
{
    using T = UserEquipBoostItemInfoData;
    static constexpr auto value = object
    );
};

struct UserEquipBoostItemInfo {
    using TYPE = UserEquipBoostItemInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserEquipBoostItemInfo>
{
    using T = UserEquipBoostItemInfo;
    static constexpr auto value = object("nAligJSQ", &T::data);
};

struct UserEquipItemInfoData {
};
template <>
struct glz::meta<UserEquipItemInfoData>
{
    using T = UserEquipItemInfoData;
    static constexpr auto value = object
    );
};

struct UserEquipItemInfo {
    using TYPE = UserEquipItemInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserEquipItemInfo>
{
    using T = UserEquipItemInfo;
    static constexpr auto value = object("71U5wzhI", &T::data);
};

struct UserFavoriteData {
};
template <>
struct glz::meta<UserFavoriteData>
{
    using T = UserFavoriteData;
    static constexpr auto value = object
    );
};

struct UserFavorite {
    using TYPE = UserFavoriteData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserFavorite>
{
    using T = UserFavorite;
    static constexpr auto value = object("3kcmQy7B", &T::data);
};

struct UserGiftInfoData {
};
template <>
struct glz::meta<UserGiftInfoData>
{
    using T = UserGiftInfoData;
    static constexpr auto value = object
    );
};

struct UserGiftInfo {
    using TYPE = UserGiftInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserGiftInfo>
{
    using T = UserGiftInfo;
    static constexpr auto value = object("30uygM9m", &T::data);
};

struct UserInfo {
	std::string	build_platform_id{};
	std::string	contact_id{};
	std::string	device_id{};
	std::string	device_name{};
	std::string	first_desc_mst_req{};
	std::string	minfo{};
	uint32_t	model_change_count{};
	std::string	notice_mst_list_req{};
	std::string	pointer_name{};
	std::string	target_os{};
	std::string	user_id{};
};
template <>
struct glz::meta<UserInfo>
{
    using T = UserInfo;
    static constexpr auto value = object(
		"j2lk52Be", &T::build_platform_id,
		"90LWtVUN", &T::contact_id,
		"Ma5GnU0H", &T::device_id,
		"iN7buP0j", &T::device_name,
		"7oV00FeR", &T::first_desc_mst_req,
		"236dItKo", &T::minfo,
		"nrg19RGe", &T::model_change_count,
		"aXf114Oz", &T::notice_mst_list_req,
		"fKSzGDFb", &T::pointer_name,
		"DFY3k6qp", &T::target_os,
		"h7eY3sAK", &T::user_id
    );
};




struct UserItemDictionaryInfoData {
};
template <>
struct glz::meta<UserItemDictionaryInfoData>
{
    using T = UserItemDictionaryInfoData;
    static constexpr auto value = object
    );
};

struct UserItemDictionaryInfo {
    using TYPE = UserItemDictionaryInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserItemDictionaryInfo>
{
    using T = UserItemDictionaryInfo;
    static constexpr auto value = object("bd5Rj6pN", &T::data);
};

struct UserPartyDeckInfoData {
	uint32_t	deck_num{};
	uint32_t	deck_type{};
	uint32_t	disp_order{};
	uint32_t	member_type{};
	uint32_t	user_unit_id{};
};
template <>
struct glz::meta<UserPartyDeckInfoData>
{
    using T = UserPartyDeckInfoData;
    static constexpr auto value = object(
		"zsiAn9P1", &T::deck_num,
		"U9ABSYEp", &T::deck_type,
		"XuJL4pc5", &T::disp_order,
		"gr48vsdJ", &T::member_type,
		"edy7fq3L", &T::user_unit_id
    );
};

struct UserPartyDeckInfo {
    using TYPE = UserPartyDeckInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserPartyDeckInfo>
{
    using T = UserPartyDeckInfo;
    static constexpr auto value = object("dX7S2Lc1", &T::data);
};

struct UserPurchaseInfo {
};
template <>
struct glz::meta<UserPurchaseInfo>
{
    using T = UserPurchaseInfo;
    static constexpr auto value = object
    );
};




struct UserReleaseInfoData {
};
template <>
struct glz::meta<UserReleaseInfoData>
{
    using T = UserReleaseInfoData;
    static constexpr auto value = object
    );
};

struct UserReleaseInfo {
    using TYPE = UserReleaseInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserReleaseInfo>
{
    using T = UserReleaseInfo;
    static constexpr auto value = object("Dp0MjKAf", &T::data);
};

struct UserSUmmonerArmsInfoData {
};
template <>
struct glz::meta<UserSUmmonerArmsInfoData>
{
    using T = UserSUmmonerArmsInfoData;
    static constexpr auto value = object
    );
};

struct UserSUmmonerArmsInfo {
    using TYPE = UserSUmmonerArmsInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserSUmmonerArmsInfo>
{
    using T = UserSUmmonerArmsInfo;
    static constexpr auto value = object("dhMmbm5p", &T::data);
};

struct UserSoundInfoData {
};
template <>
struct glz::meta<UserSoundInfoData>
{
    using T = UserSoundInfoData;
    static constexpr auto value = object
    );
};

struct UserSoundInfo {
    using TYPE = UserSoundInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserSoundInfo>
{
    using T = UserSoundInfo;
    static constexpr auto value = object("d98mjNDc", &T::data);
};

struct UserSummonerInfoData {
};
template <>
struct glz::meta<UserSummonerInfoData>
{
    using T = UserSummonerInfoData;
    static constexpr auto value = object
    );
};

struct UserSummonerInfo {
    using TYPE = UserSummonerInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserSummonerInfo>
{
    using T = UserSummonerInfo;
    static constexpr auto value = object("n5mdIUqj", &T::data);
};

struct UserTeamArchiveData {
};
template <>
struct glz::meta<UserTeamArchiveData>
{
    using T = UserTeamArchiveData;
    static constexpr auto value = object
    );
};

struct UserTeamArchive {
    using TYPE = UserTeamArchiveData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserTeamArchive>
{
    using T = UserTeamArchive;
    static constexpr auto value = object("zI2tJB7R", &T::data);
};

struct UserTeamArenaArchiveData {
};
template <>
struct glz::meta<UserTeamArenaArchiveData>
{
    using T = UserTeamArenaArchiveData;
    static constexpr auto value = object
    );
};

struct UserTeamArenaArchive {
    using TYPE = UserTeamArenaArchiveData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserTeamArenaArchive>
{
    using T = UserTeamArenaArchive;
    static constexpr auto value = object("PQ56vbkI", &T::data);
};

struct UserTeamInfo {
	uint32_t	action_point{};
	uint32_t	action_rest_timer{};
	uint32_t	active_deck{};
	uint32_t	add_friend_count{};
	uint32_t	add_unit_count{};
	uint32_t	add_warehouse_count{};
	uint32_t	arena_deck_num{};
	uint32_t	brave_coin{};
	uint32_t	brave_points_total{};
	uint32_t	colosseum_ticket{};
	uint32_t	completed_task_count{};
	uint32_t	current_brave_points{};
	uint32_t	deck_cost{};
	uint64_t	exp{};
	uint32_t	fight_point{};
	uint32_t	fight_rest_timer{};
	uint32_t	free_gems{};
	uint32_t	friend_agree_count{};
	std::string	friend_message{};
	uint32_t	friend_point{};
	uint32_t	gift_receive_count{};
	uint32_t	inbox_message_count{};
	uint64_t	karma{};
	uint32_t	level{};
	uint32_t	max_action_point{};
	uint32_t	max_equip_slot_count{};
	uint32_t	max_fight_point{};
	uint32_t	max_friend_count{};
	uint32_t	max_unit_count{};
	uint32_t	mysterybox_count{};
	uint32_t	paid_gems{};
	uint32_t	present_count{};
	uint32_t	rainbow_coin{};
	std::string	reinforcement_deck{};
	uint32_t	slot_game_flag{};
	uint32_t	summon_ticket{};
	std::string	user_id{};
	std::string	want_gift{};
	uint32_t	warehouse_count{};
	uint64_t	zel{};
};
template <>
struct glz::meta<UserTeamInfo>
{
    using T = UserTeamInfo;
    static constexpr auto value = object(
		"0P9X1YHs", &T::action_point,
		"f0IY4nj8", &T::action_rest_timer,
		"Z0Y4RoD7", &T::active_deck,
		"2rR5s6wn", &T::add_friend_count,
		"Px1X7fcd", &T::add_unit_count,
		"iI7Wj6pM", &T::add_warehouse_count,
		"gKNfIZiA", &T::arena_deck_num,
		"03UGMHxF", &T::brave_coin,
		"bya9a67k", &T::brave_points_total,
		"lKuj3Ier", &T::colosseum_ticket,
		"3a8b9D8i", &T::completed_task_count,
		"22rqpZTo", &T::current_brave_points,
		"QYP4kId9", &T::deck_cost,
		"d96tuT2E", &T::exp,
		"YS2JG9no", &T::fight_point,
		"jp9s8IyY", &T::fight_rest_timer,
		"92uj7oXB", &T::free_gems,
		"qVBx7g2c", &T::friend_agree_count,
		"bM7RLu5K", &T::friend_message,
		"J3stQ7jd", &T::friend_point,
		"1RQT92uE", &T::gift_receive_count,
		"7qncTHUJ", &T::inbox_message_count,
		"HTVh8a65", &T::karma,
		"D9wXQI2V", &T::level,
		"YnM14RIP", &T::max_action_point,
		"gEX30r1b", &T::max_equip_slot_count,
		"9m5FWR8q", &T::max_fight_point,
		"3u41PhR2", &T::max_friend_count,
		"ouXxIY63", &T::max_unit_count,
		"Qo9doUsp", &T::mysterybox_count,
		"d37CaiX1", &T::paid_gems,
		"EfinBo65", &T::present_count,
		"KAZmxkgy", &T::rainbow_coin,
		"TwqMChon", &T::reinforcement_deck,
		"s3uU4Lgb", &T::slot_game_flag,
		"9r3aLmaB", &T::summon_ticket,
		"h7eY3sAK", &T::user_id,
		"s2WnRw9N", &T::want_gift,
		"5pjoGBC4", &T::warehouse_count,
		"Najhr8m6", &T::zel
    );
};




struct UserTownFacilityInfoData {
};
template <>
struct glz::meta<UserTownFacilityInfoData>
{
    using T = UserTownFacilityInfoData;
    static constexpr auto value = object
    );
};

struct UserTownFacilityInfo {
    using TYPE = UserTownFacilityInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserTownFacilityInfo>
{
    using T = UserTownFacilityInfo;
    static constexpr auto value = object("YRgx49WG", &T::data);
};

struct UserTownLocationDetailData {
};
template <>
struct glz::meta<UserTownLocationDetailData>
{
    using T = UserTownLocationDetailData;
    static constexpr auto value = object
    );
};

struct UserTownLocationDetail {
    using TYPE = UserTownLocationDetailData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserTownLocationDetail>
{
    using T = UserTownLocationDetail;
    static constexpr auto value = object("s8TCo2MS", &T::data);
};

struct UserTownLocationInfoData {
};
template <>
struct glz::meta<UserTownLocationInfoData>
{
    using T = UserTownLocationInfoData;
    static constexpr auto value = object
    );
};

struct UserTownLocationInfo {
    using TYPE = UserTownLocationInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserTownLocationInfo>
{
    using T = UserTownLocationInfo;
    static constexpr auto value = object("yj46Q2xw", &T::data);
};

struct UserUnitDbbInfoData {
};
template <>
struct glz::meta<UserUnitDbbInfoData>
{
    using T = UserUnitDbbInfoData;
    static constexpr auto value = object
    );
};

struct UserUnitDbbInfo {
    using TYPE = UserUnitDbbInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserUnitDbbInfo>
{
    using T = UserUnitDbbInfo;
    static constexpr auto value = object("sxorQ3Mb", &T::data);
};

struct UserUnitDbbLevelInfoData {
};
template <>
struct glz::meta<UserUnitDbbLevelInfoData>
{
    using T = UserUnitDbbLevelInfoData;
    static constexpr auto value = object
    );
};

struct UserUnitDbbLevelInfo {
    using TYPE = UserUnitDbbLevelInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserUnitDbbLevelInfo>
{
    using T = UserUnitDbbLevelInfo;
    static constexpr auto value = object("tR4katob", &T::data);
};

struct UserUnitDictionaryData {
};
template <>
struct glz::meta<UserUnitDictionaryData>
{
    using T = UserUnitDictionaryData;
    static constexpr auto value = object
    );
};

struct UserUnitDictionary {
    using TYPE = UserUnitDictionaryData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserUnitDictionary>
{
    using T = UserUnitDictionary;
    static constexpr auto value = object("GV81ctzR", &T::data);
};

struct UserUnitInfoData {
	uint32_t	add_atk{};
	uint32_t	add_def{};
	uint32_t	add_extra_passive_skill_id{};
	uint32_t	add_heal{};
	uint32_t	add_hp{};
	uint32_t	base_atk{};
	uint32_t	base_def{};
	uint32_t	base_heal{};
	uint32_t	base_hp{};
	std::string	element{};
	uint32_t	equipitem_frame_id{};
	uint32_t	equipitem_frame_id2{};
	uint32_t	equipitem_id{};
	uint32_t	equipitem_id2{};
	uint32_t	exp{};
	uint32_t	ext_atk{};
	uint32_t	ext_count{};
	uint32_t	ext_def{};
	uint32_t	ext_heal{};
	uint32_t	ext_hp{};
	uint32_t	extra_passive_skill_id{};
	uint32_t	extra_passive_skill_id2{};
	uint32_t	extra_skill_id{};
	uint32_t	extra_skill_lv{};
	uint32_t	fe_bp{};
	uint32_t	fe_max_usable_bp{};
	std::string	fe_skill_info{};
	uint32_t	fe_used_bp{};
	uint32_t	leader_skill_id{};
	uint32_t	limit_over_atk{};
	uint32_t	limit_over_def{};
	uint32_t	limit_over_heal{};
	uint32_t	limit_over_hp{};
	uint32_t	new_flag{};
	uint32_t	omni_level{};
	uint32_t	receive_date{};
	uint32_t	skill_id{};
	uint32_t	skill_lv{};
	uint32_t	total_exp{};
	uint32_t	unit_id{};
	uint32_t	unit_img_type{};
	uint32_t	unit_lv{};
	uint32_t	unit_type_id{};
	std::string	user_id{};
	uint32_t	user_unit_id{};
};
template <>
struct glz::meta<UserUnitInfoData>
{
    using T = UserUnitInfoData;
    static constexpr auto value = object(
		"RT4CtH5d", &T::add_atk,
		"GcMD0hy6", &T::add_def,
		"T4rewHa9", &T::add_extra_passive_skill_id,
		"C1HZr3pb", &T::add_heal,
		"cuIWp89g", &T::add_hp,
		"67CApcti", &T::base_atk,
		"q08xLEsy", &T::base_def,
		"PWXu25cg", &T::base_heal,
		"e7DK0FQT", &T::base_hp,
		"iNy0ZU5M", &T::element,
		"0R3qTPK9", &T::equipitem_frame_id,
		"RXfC31FA", &T::equipitem_frame_id2,
		"Ge8Yo32T", &T::equipitem_id,
		"mZA7fH2v", &T::equipitem_id2,
		"d96tuT2E", &T::exp,
		"t4m1RH6Y", &T::ext_atk,
		"5gXxT7LZ", &T::ext_count,
		"e6mY8Z0k", &T::ext_def,
		"X6jf8DUw", &T::ext_heal,
		"TokWs1B3", &T::ext_hp,
		"cP83zNsv", &T::extra_passive_skill_id,
		"LjY4DfRg", &T::extra_passive_skill_id2,
		"iEFZ6H19", &T::extra_skill_id,
		"RQ5GnFE2", &T::extra_skill_lv,
		"bFQbZh3x", &T::fe_bp,
		"GIO9DTif", &T::fe_max_usable_bp,
		"Fnxab5CN", &T::fe_skill_info,
		"3RgneFpP", &T::fe_used_bp,
		"oS3kTZ2W", &T::leader_skill_id,
		"D6bKH5eV", &T::limit_over_atk,
		"3CsiQA0h", &T::limit_over_def,
		"XJs2rPx0", &T::limit_over_heal,
		"ISj9u5VL", &T::limit_over_hp,
		"dJNpLc81", &T::new_flag,
		"49sa3sld", &T::omni_level,
		"Bvkx8s6M", &T::receive_date,
		"nj9Lw7mV", &T::skill_id,
		"3NbeC8AB", &T::skill_lv,
		"gQInj3H6", &T::total_exp,
		"pn16CNah", &T::unit_id,
		"2pAyFjmZ", &T::unit_img_type,
		"D9wXQI2V", &T::unit_lv,
		"nBTx56W9", &T::unit_type_id,
		"h7eY3sAK", &T::user_id,
		"edy7fq3L", &T::user_unit_id
    );
};

struct UserUnitInfo {
    using TYPE = UserUnitInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserUnitInfo>
{
    using T = UserUnitInfo;
    static constexpr auto value = object("4ceMWH6k", &T::data);
};

struct UserWarehouseInfoData {
};
template <>
struct glz::meta<UserWarehouseInfoData>
{
    using T = UserWarehouseInfoData;
    static constexpr auto value = object
    );
};

struct UserWarehouseInfo {
    using TYPE = UserWarehouseInfoData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<UserWarehouseInfo>
{
    using T = UserWarehouseInfo;
    static constexpr auto value = object("9wjrh74P", &T::data);
};

