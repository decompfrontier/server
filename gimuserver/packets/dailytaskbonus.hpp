
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/mst/dailytaskbonus.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct DailyTaskBonusMstData {
	uint32_t	bonus_brave_points{};
};
template <>
struct glz::meta<DailyTaskBonusMstData>
{
    using T = DailyTaskBonusMstData;
    static constexpr auto value = object(
		"k3bD738b", &T::bonus_brave_points
    );
};

struct DailyTaskBonusMst;
template <> struct glz::meta<DailyTaskBonusMst>; 

struct DailyTaskBonusMst : public DailyTaskBonusMstData { 
    using TYPE = DailyTaskBonusMstData;
    using ARRAY_TYPE = std::array<TYPE, 1>;
    friend glz::meta<DailyTaskBonusMst>;

    DailyTaskBonusMst() = default;

    private:
        explicit DailyTaskBonusMst(const TYPE& q) : TYPE(q) {}
        ARRAY_TYPE _internal_data;

};
template <>
struct glz::meta<DailyTaskBonusMst>
{
    using T = DailyTaskBonusMst;
    static constexpr auto read_x = [](T& s, const T::ARRAY_TYPE& input) { s = T(input[0]); };
    static constexpr auto write_x = [](T& s) -> T::ARRAY_TYPE& { s._internal_data = T::ARRAY_TYPE{s}; return s._internal_data; };
    static constexpr auto value = glz::custom<read_x, write_x>;
};

struct DailyTaskMstData {
	std::string	area_id{};
	uint32_t	brave_points{};
	uint32_t	brave_points_total{};
	std::string	desc{};
	std::string	key{};
	uint32_t	task_brave_pts{};
	uint32_t	task_count{};
	uint32_t	times_completed{};
	std::string	title{};
};
template <>
struct glz::meta<DailyTaskMstData>
{
    using T = DailyTaskMstData;
    static constexpr auto value = object(
		"a3011F8b", &T::area_id,
		"22rqpZTo", &T::brave_points,
		"bya9a67k", &T::brave_points_total,
		"M7yKr4c1", &T::desc,
		"O36Qv37k", &T::key,
		"T4bV8aI9", &T::task_brave_pts,
		"Y3DbX5ot", &T::task_count,
		"9cKyb15U", &T::times_completed,
		"hd2Jf3nC", &T::title
    );
};

struct DailyTaskMst {
    using TYPE = DailyTaskMstData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<DailyTaskMst>
{
    using T = DailyTaskMst;
    static constexpr auto value = object("k23D7d43", &T::data);
};

struct DailyTaskPrizeMstData {
	uint32_t	brave_points_cost{};
	uint32_t	current_claim_count{};
	std::string	desc{};
	uint32_t	id{};
	uint32_t	max_claim_count{};
	bool	milestone_prize{};
	uint32_t	present_type{};
	uint32_t	reward_count{};
	uint32_t	reward_id{};
	std::string	reward_param{};
	uint64_t	time_limit{};
	std::string	title{};
};
template <>
struct glz::meta<DailyTaskPrizeMstData>
{
    using T = DailyTaskPrizeMstData;
    static constexpr auto value = object(
		"4NuIwm77", &T::brave_points_cost,
		"jT3oB57e", &T::current_claim_count,
		"L2VkgH08", &T::desc,
		"d83aQ39U", &T::id,
		"D2BlS89M", &T::max_claim_count,
		"J3l5We66", glzhlp::strbool<&T::milestone_prize>,
		"30Kw4WBa", &T::present_type,
		"wJsB35iH", &T::reward_count,
		"TdDHf59J", &T::reward_id,
		"37moriMq", &T::reward_param,
		"qY49LBjw", &T::time_limit,
		"T091Rsbe", &T::title
    );
};

struct DailyTaskPrizeMst {
    using TYPE = DailyTaskPrizeMstData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<DailyTaskPrizeMst>
{
    using T = DailyTaskPrizeMst;
    static constexpr auto value = object("a739yK18", &T::data);
};

