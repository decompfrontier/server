
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/net/challenge_arena.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct ChallengeArenaUserInfoData {
	uint32_t	league_id{};
	uint32_t	rainbow_coins{};
	std::string	unk{};
	uint32_t	unkint{};
	uint32_t	unkint2{};
	uint32_t	unkint4{};
	uint32_t	unkint5{};
	uint32_t	unkint7{};
	uint32_t	unkint8{};
	uint32_t	unkint9{};
	std::string	unkstr2{};
};
template <>
struct glz::meta<ChallengeArenaUserInfoData>
{
    using T = ChallengeArenaUserInfoData;
    static constexpr auto value = object(
		"xZeGgDQe", &T::league_id,
		"KAZmxkgy", &T::rainbow_coins,
		"h7eY3sAK", &T::unk,
		"Nou5bCmm", &T::unkint,
		"AKP8t3xK", &T::unkint2,
		"e34YV1Ey", &T::unkint4,
		"4lH05mQr", &T::unkint5,
		"BcIqcWDM", &T::unkint7,
		"fBGCdi8I", &T::unkint8,
		"zf5Ae850", &T::unkint9,
		"outas79f", &T::unkstr2
    );
};

struct ChallengeArenaUserInfo;
template <> struct glz::meta<ChallengeArenaUserInfo>; 

struct ChallengeArenaUserInfo : public ChallengeArenaUserInfoData { 
    using TYPE = ChallengeArenaUserInfoData;
    using ARRAY_TYPE = std::array<TYPE, 1>;
    friend glz::meta<ChallengeArenaUserInfo>;

    ChallengeArenaUserInfo() = default;

    private:
        explicit ChallengeArenaUserInfo(const TYPE& q) : TYPE(q) {}
        ARRAY_TYPE _internal_data;

};
template <>
struct glz::meta<ChallengeArenaUserInfo>
{
    using T = ChallengeArenaUserInfo;
    static constexpr auto read_x = [](T& s, const T::ARRAY_TYPE& input) { s = T(input[0]); };
    static constexpr auto write_x = [](T& s) -> T::ARRAY_TYPE& { s._internal_data = T::ARRAY_TYPE{s}; return s._internal_data; };
    static constexpr auto value = glz::custom<read_x, write_x>;
};

