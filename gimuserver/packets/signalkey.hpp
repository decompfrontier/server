
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/net/signalkey.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct SignalKeyData {
	std::string	key{};
};
template <>
struct glz::meta<SignalKeyData>
{
    using T = SignalKeyData;
    static constexpr auto value = object(
		"Kn51uR4Y", &T::key
    );
};

struct SignalKey;
template <> struct glz::meta<SignalKey>; 

struct SignalKey : public SignalKeyData { 
    using TYPE = SignalKeyData;
    using ARRAY_TYPE = std::array<TYPE, 1>;
    friend glz::meta<SignalKey>;

    SignalKey() = default;

    private:
        explicit SignalKey(const TYPE& q) : TYPE(q) {}
        ARRAY_TYPE _internal_data;

};
template <>
struct glz::meta<SignalKey>
{
    using T = SignalKey;
    static constexpr auto read_x = [](T& s, const T::ARRAY_TYPE& input) { s = T(input[0]); };
    static constexpr auto write_x = [](T& s) -> T::ARRAY_TYPE& { s._internal_data = T::ARRAY_TYPE{s}; return s._internal_data; };
    static constexpr auto value = glz::custom<read_x, write_x>;
};

