
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/mst/url.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct UrlMstData {
	std::string	agreement_official_url{};
	std::string	agreement_url{};
	std::string	app_bank_site_url{};
	std::string	appli_dl_android_url{};
	std::string	appli_dl_url{};
	std::string	appli_sommelier_url{};
	std::string	contact_url{};
	std::string	credit_url{};
	std::string	dia_possession_url{};
	std::string	facebook_site_url{};
	std::string	fami_app_site_url{};
	std::string	friend_refeer_url{};
	std::string	gacha_contents_url{};
	std::string	game_gift_url{};
	std::string	id{};
	std::string	legal_fund_settlement_url{};
	std::string	lobi_agreement_url{};
	std::string	lobi_rec_help_url{};
	std::string	lobl_schema_url{};
	std::string	lobl_site_url{};
	std::string	multi_archive_url{};
	std::string	notice_url{};
	std::string	official_site{};
	std::string	specific_trade_url{};
	std::string	transfer_site_url{};
	std::string	twitter_site_url{};
};
template <>
struct glz::meta<UrlMstData>
{
    using T = UrlMstData;
    static constexpr auto value = object(
		"fNud6c7r", &T::agreement_official_url,
		"3f9T5d6G", &T::agreement_url,
		"e4qEPM8j", &T::app_bank_site_url,
		"D0gMyJ3o", &T::appli_dl_android_url,
		"E1oFw94b", &T::appli_dl_url,
		"25oCPAM7", &T::appli_sommelier_url,
		"UMRh8tS2", &T::contact_url,
		"iVgm9n6v", &T::credit_url,
		"9Nrt0SPY", &T::dia_possession_url,
		"HcIt7G8y", &T::facebook_site_url,
		"UWb9B6sm", &T::fami_app_site_url,
		"R4Dk2FYs", &T::friend_refeer_url,
		"qlO1kVZZ", &T::gacha_contents_url,
		"wT6cF35V", &T::game_gift_url,
		"ut3nd0yV", &T::id,
		"z6q1aUXE", &T::legal_fund_settlement_url,
		"6Qj8YZtE", &T::lobi_agreement_url,
		"tK24myuj", &T::lobi_rec_help_url,
		"Yh6MiF8f", &T::lobl_schema_url,
		"t9jT3QKC", &T::lobl_site_url,
		"R10T3gFJ", &T::multi_archive_url,
		"cH0Kdchp", &T::notice_url,
		"ME4h3vDn", &T::official_site,
		"AZ2mCbU1", &T::specific_trade_url,
		"Rf63vLu7", &T::transfer_site_url,
		"13kI62fP", &T::twitter_site_url
    );
};

struct UrlMst;
template <> struct glz::meta<UrlMst>; 

struct UrlMst : public UrlMstData { 
    using TYPE = UrlMstData;
    using ARRAY_TYPE = std::array<TYPE, 1>;
    friend glz::meta<UrlMst>;

    UrlMst() = default;

    private:
        explicit UrlMst(const TYPE& q) : TYPE(q) {}
        ARRAY_TYPE _internal_data;

};
template <>
struct glz::meta<UrlMst>
{
    using T = UrlMst;
    static constexpr auto read_x = [](T& s, const T::ARRAY_TYPE& input) { s = T(input[0]); };
    static constexpr auto write_x = [](T& s) -> T::ARRAY_TYPE& { s._internal_data = T::ARRAY_TYPE{s}; return s._internal_data; };
    static constexpr auto value = glz::custom<read_x, write_x>;
};

