
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/net/gumi_live.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct GameDls {
	std::string	bg_image{};
	std::optional<bool>	force{};
	std::string	game_ip{};
	std::string	gumilive_ip{};
	std::optional<std::string>	msg{};
	std::string	resource_ip{};
	uint32_t	version{};
};
template <>
struct glz::meta<GameDls>
{
    using T = GameDls;
    static constexpr auto value = object(
		"bgimage", &T::bg_image,
		"force", &T::force,
		"game", &T::game_ip,
		"gumilive", &T::gumilive_ip,
		"force_msg", &T::msg,
		"resource", &T::resource_ip,
		"mstv", &T::version
    );
};




struct GuestLogin {
	list	servers{};
	StatusEnum	status{};
	uint32_t	status_number{};
	std::string	token{};
	uint32_t	user_id{};
};
template <>
struct glz::meta<GuestLogin>
{
    using T = GuestLogin;
    static constexpr auto value = object(
		"servers", &T::servers,
		"status", &T::status,
		"status_no", &T::status_number,
		"token", &T::token,
		"game_user_id", &T::user_id
    );
};




struct SREE {
	std::string	body{};
};
template <>
struct glz::meta<SREE>
{
    using T = SREE;
    static constexpr auto value = object(
		"SREE", &T::body
    );
};




enum class StatusEnum {
	Success = successful,
	Error = failed,
};





