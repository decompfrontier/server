
/*
    This file was autogenerated by decompfrontier packet-generator.
    Generation date: 2025-04-10 17:17:19

    DO NOT MODIFY THIS FILE! MODIFY THE FILE ./data/mst/npc.py INSIDE THE
    PACKET GENERATOR REPOSITORY AND RUN THE GENERATION AGAIN!
*/
#pragma once

#include <glaze_helpers.hpp> // c++ runtime helpers

struct NpcMstData {
	uint32_t	arena_rank_id{};
	std::string	handle_name{};
	uint32_t	id{};
	NpcPartyInfo	parties{};
	NpcTeamInfo	team{};
	NpcUnitInfo	units{};
};
template <>
struct glz::meta<NpcMstData>
{
    using T = NpcMstData;
    static constexpr auto value = object(
		"JmFn3g9t", &T::arena_rank_id,
		"B5JQyV8j", &T::handle_name,
		"7zyHb5h9", &T::id,
		"oPsmRC18", &T::parties,
		"g94bDiaS", &T::team,
		"bS9s4GCp", &T::units
    );
};

struct NpcMst {
    using TYPE = NpcMstData;
    std::deque<TYPE> data;
};
template <>
struct glz::meta<NpcMst>
{
    using T = NpcMst;
    static constexpr auto value = object("hV5vWu6C", &T::data);
};

struct NpcPartyInfo {
	uint32_t	disp_order{};
	uint32_t	id{};
	uint32_t	type{};
};
template <>
struct glz::meta<NpcPartyInfo>
{
    using T = NpcPartyInfo;
    static constexpr auto value = object(
		"P_DISPORDER", &T::disp_order,
		"P_USER_UNIT_ID", &T::id,
		"P_MEMBER_TYPE", &T::type
    );
};




struct NpcTeamInfo {
	std::string	friend_message{};
	uint32_t	lv{};
	std::string	user_id{};
};
template <>
struct glz::meta<NpcTeamInfo>
{
    using T = NpcTeamInfo;
    static constexpr auto value = object(
		"P_FRIEND_MESSAGE", &T::friend_message,
		"P_LV", &T::lv,
		"P_USER_ID", &T::user_id
    );
};




struct NpcUnitInfo {
	uint32_t	atk{};
	uint32_t	deff{};
	uint32_t	equip_item_id{};
	uint32_t	hel{};
	uint32_t	hp{};
	uint32_t	id{};
	uint32_t	lv{};
	uint32_t	party_id{};
	uint32_t	skill_id{};
	uint32_t	skill_lv{};
	uint32_t	type{};
};
template <>
struct glz::meta<NpcUnitInfo>
{
    using T = NpcUnitInfo;
    static constexpr auto value = object(
		"P_ATK", &T::atk,
		"P_DEF", &T::deff,
		"P_EQP_ITEM_ID", &T::equip_item_id,
		"P_HEL", &T::hel,
		"P_HP", &T::hp,
		"P_UNIT_ID", &T::id,
		"P_LV", &T::lv,
		"P_USER_UNIT_ID", &T::party_id,
		"P_SKILL_LV", &T::skill_id,
		"P_SKILL_ID", &T::skill_lv,
		"P_UNIT_TYPE_ID", &T::type
    );
};




